==OVERALL==
Integration tests can be run with
make test

Function tests are run on any run of the program eg:
./interp_s TTLs/skip_nested_loop.ttl

==PARSE==
- I wrote the code to return booleans as exit failures are difficult to test.

- During development I created a #define:
 DEBUG printf("%s %s %s\n",CURRENT_WORD, __func__, __LINE__);
to help with debugging. 
I added this line at the top of every function to
 identify in which function things were going wrong.

- Wrote tests for each function
(for example, does adding invalid variables into a lst result in failure.)
To avoid too much repetition, my testing mostly checks the special cases
that the function is designed to catch (for example, SET checks for invalid
sets, but not every possible invalid pfix, which is tested in pfix.)
To avoid errors involving a recursive function causing errors, I
check that the current_word is correctly set at the end of the function,
and also validated with bash script testing.

- I wrote my own .ttl files to test specific functionality that was 
 tricky to test using inline functions. For example:
* file contains too many words
* file contains word that's too long.
* incorrect arguments.

- I also used the script to test that every file exits with the
error code that I expected.
 
== INTERP ==
As above, each function is tested with individual assert tests. 
Primarily I tested the cases like ensuring variables are being set when
set is run, forward results in Ws being written to my array etc.

Some edge cases I discovered and tested for are:
- attempting to overpop the stack: SET ( 1 + )
- Empty loops are correctly skipped (including when an empty
loop contains an inner loop.)
- Attempting to go out of bounds causes an error.

My bash script does several additional pieces of testing, including: 
* Checking the output files (txt,ps,pdf) 
are created and if possible that they contain expected text.
(this includes checking that the output of all but 4 files 
perfectly match the given txt files.) For .ps files I check that
 expected instructions are included
(eg: setlinewidth, moveto). I also validate that I am getting the number of instructions 
I expect, using grep (for example, down arrow should contain 8 movetos.)

- I added a helper function, fequal to handle floating point imprecision.

- I added additional checks for the operator, as my initial code
failed when I tested a string that started with an operator.

- I added an add_to_angle and subtract 
from angle to avoid overflow issues
(since negative angles are possible, 
this isn't as simple as I first thought, 
something I caught during testing.)

- To avoid repetition, occasionally I have a 
function test behavior of multiple functions,
for example, test_get_and_set_variables tests the 
behavior of three functions that are
highly related to each other. This was useful, as I could
manually set variables in later
functions; reducing the amount of .ttkl code I had to write and avoiding
errors in one (already tested) 
function causing errors in another as much as possible.

- I explicitly check that going out of bounds causes an 
error to be raised.

- I didn't implement loop scope. This means
that variables set for a loop are accessible outside of the loop.
This was useful, as it allowed for my loop testing to 
test that a value is set to the last value of the loop. 

- I also tested loops worked by
ensuring that nested loops result in mathematical operations running 
sucessfully (they actually match C, which is fun!)

- To avoid code like SET A ( 5 + + * ) causing errors, 
I added a check that ensures that
the stack should always have only one value after executing
 an expression. This also causes
SET A (5 5) and SET A () to throw an error. 
These were tested in their respective functions.

- I tested that empty nested loops are skipped by using 
TTLs/skip_nested_loop.ttl. I then check that the instruction 
I expected to run has correctly run. There is one edge case I couldnâ€™t
fix, with an unterminated inner loop (unterminated_inner_loop.ttl),
but since it fails gracefully, I think this is acceptable to call
Turtle programmer error.

- I tested that attempting to divide by zero causes an error.

- I tested that accessing unaccessible variables throws an error.

- For the ps output file, I added a check that the filename isn't longer
than 100 characters, since that would overflow the string I'm attempting
to write it into.

- My is_number function is one of the more complicated functions.
I tested it to ensure that it correctly matches minus numbers, positive
numbers and floats. I made the decision that .1 is a valid number (without the leading 0)
since this is parsed by C also. This is integration tested the bash script with weirdnums.ttl 
and tested in the inline function.

- I tested that going FORWARD -1 results correctly going backwards. Initially the way
I coded it resulted in it printing nothing (as the movement loop didn't execute).
I added a test within the function, and I adapted the octogon.ttl to my bash script
 test to check drawing a complex object backwards suceeds.

 - I encountered an out of bounds error while testing my code. 
 I wasn't rounding the doubles before checking in the bounds function! 
 I wrote a fix and then created out_of_bounds_left.ttl in the
 bash script to make sure it cannot happen again.