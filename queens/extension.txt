This extension first utilized the code from https://github.com/csnwc/Exercises-In-C/tree/f3803259aa6a0bfc210d6bf07c8d7e578bde9333/Code/Week5/SDL
as starter code for understanding SDL.

// TODO DELETE
Uses a more efficient algorithm (backtracking)
Uses SDL to represent the board solutions.


// a solve function. uses board and col
    if col >= N:  // N is the number of queens. If we're up to col, we can stop and suceed.
        // print_solution_board?
        // incrememnt the number of solutions?
        return true

    for i in range(0, N):  // Try placing the queen in all rows one by one
        if can_place_queen(board, i, col):
            place_queen(board, i, col)  // Place queen at (i, col)
            if solve(board, col + 1):  // Recur to place rest of the queens
                return true
            remove_queen(board, i, col)  // If placing queen in row i doesn't lead to a solution, then remove queen from (i, col) (backtrack)

    return false  // If the queen cannot be placed in any row in this column, return false

// a can_place_queen function.
    // Check this row on left side -- ie: have you placed a queen in this row already.

    // Check upper diagonal on left side
            return false if found.

    // Check lower diagonal on left side
            return false if  found.

    return true

// Main function
function main():
    board = create_blank_board(8);
    if solve(board, 0) == false:
        print("Solution does not exist")
        return false

    printSolution(board)
    return true


// Start from the first column.
// In the current column, start from the first row and check if a queen can be placed there (i.e., if it doesn't lead to a conflict with already placed queens).
// If it's possible to place a queen, move to the next column and repeat the process.
// If you reach a point where no safe position is found in the current column (all rows checked), then backtrack:
// Move to the previous column.
// Move the queen in that column to the next possible row.
// Continue the process.