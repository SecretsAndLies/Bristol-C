For my extension, I imagined that a client gave me the bsa.h
structure and said that it must support all those operations
(except tostring) and provided fibmemo.c
as the programs is called very often.

The client wants that program specifically to run fast, 
and also stressed that the old approach (alloc) was
giving them storage issues when running those programs.

I looked through them and noticed that bsa_maxindex and bsa_foreach 
was not called in their code. After confirming with the
client that they rarely use these functions in their code, 
I decided on a hashing implementation that is O(N) for storage. 
In speed, the approach is O(1) for the get, set and delete 
operations (for sparse data sets) but O(N) for the bsa_maxindex
and bsa_foreach is O(N+M) where N is the intial size of the hash table.

Since I use a linked list for collisions, the theoretical max
is 


- initial size of the table is N
- Run benchmarks. How much storage used on client programs.
- 

to do - compare how much slower this new max index func is.

Sources: I referenced the CS50 implementation of a hash table.
https://youtu.be/nvzVHwrrub0
as well as the in class implementation of a linked list.