==Intro==
I decided on a hashing implementation using 
a linked list for collisions.

==Hash Function==
My hash function a modulus of the initial 
space in the array (15,319) which I chose because it is a 
reasonably large prime number, helping to reduce collisions. 
Increasing this number would increase speed at the expense of memory.

==Space complexity==
The main advantage of this approach is that it's O(N) for
memory usage (with an overhead of 123KB for the initial size of the array).
Because of the overhead, this approach is worse if only a 
few small indexes are written, but much better for large indexes.

Using valgrind and removing tests, the programs used:
*fibmemo* 2KB bytes vs 123KB bytes (6,050% more)
*sieve* 5.8KB vs 128KB bytes (2093% more)
*isfactorial* 2.4GB vs 123KB bytes (99.99% less!)

The worst case scenario for the alloc version would be if a number was written
to an index in every row (ie: at index 0, 1, 3, 7 etc). 
This would cause it to initialize a huge amount of space for only 30 numbers. 
I tested this and the extension results in a 
99.99% decrease in memory usage, from 8.5GB to 123KB.

==Overall Time Complexity==
Unfortunately, depending on the data, this approach can be slower.

To time the example programs, I created a bash script that ran
each program 20 times and returned the average user time 
to 6 significant figures. The timings (in seconds) are below.

*fibmemo* 0.00045 vs 0.0003 (33% faster)
*sieve* 0.0005 vs 0.0007 (30% slower)
*isfactorial* 2.13 vs 2.29 (7% slower)

However, these numbers could be significantly different with
other data.
I tested this by adding to index 0-I, linearly. 
When I is multiplied by 100, the original is slowed down 
by approximately 100x, whereas for the extension,
going from I=100,000 to I=10,000,000 resulted in it being 642x
slower (vs only 116x for the alloc version.)

This would only get worse as the number of collisions increased.
A worst case scenario for the extension would be if the 
indexes 0, 15319, 15319*2, 15319*3... were written. This 
would be O(N) for set, get and delete.

In order to get the foreach function to print the numbers
in order, I used a linear search. This is significantly less efficient than 
the approach in the alloc version. To test this, I added numbers
at indexes 0, 10, 10K, 10M etc. 
I found that the alloc foreach function was
5x faster than the extension (0.1 seconds vs 0.5 seconds).

==Sources==
I referenced:
• The CS50 implementation of a hash table (https://youtu.be/nvzVHwrrub0)
• The in-class implementation of a linked list.

